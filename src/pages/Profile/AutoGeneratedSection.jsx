import { useEffect, useState } from "react";
import dbApi from "../../utils/api";
import PropTypes from "prop-types";
import coin from "../../components/coin.svg";
import infinite from "../../components/infinite.svg";

const AutoGeneratedSection = ({ userId }) => {
  const [bookings, setBookings] = useState([]);
  const [applicants, setApplicants] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [selectedBooking, setSelectedBooking] = useState(null);
  const [postTitle, setPostTitle] = useState("");

  useEffect(() => {
    const fetchBookingsAndApplicants = async () => {
      try {
        const bookingsData = await dbApi.getBookingsForUser(userId);
        setBookings(bookingsData);

        // 獲取 applicantId
        const applicantIds = bookingsData.map((booking) =>
          booking.provider_uid === userId
            ? booking.demander_uid
            : booking.provider_uid,
        );

        const applicantDataPromises = applicantIds.map((id) =>
          dbApi.getProfile(id),
        );
        const applicantsData = await Promise.all(applicantDataPromises);
        setApplicants(applicantsData);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    fetchBookingsAndApplicants();
  }, [userId]);

  const handleReviewClick = async (booking, applicant) => {
    const postTitle = await dbApi.getPostTitle(booking.post_id);
    setSelectedBooking({ ...booking, applicant });
    setPostTitle(postTitle);
    setShowModal(true);
  };

  const handleCloseModal = () => {
    setShowModal(false);
    setSelectedBooking(null);
    setPostTitle("");
  };

  return (
    <div className="flex gap-4">
      {applicants && applicants.length > 0 ? (
        applicants.map((applicant, index) => (
          <div key={index} className="flex flex-col items-center">
            <img
              src={applicant.profile_picture}
              className="size-20 rounded-full border-2 border-white bg-red-100 object-cover object-center p-2 shadow-md"
              alt="author"
            />
            <p>{applicant.name}</p>
            <button
              className="mb-4 mt-2 max-w-max rounded-full bg-yellow-700 px-4 py-2 text-sm text-white"
              onClick={() => handleReviewClick(bookings[index], applicant)}
            >
              審核
            </button>
          </div>
        ))
      ) : (
        <p>Loading applicants...</p>
      )}
      {showModal && selectedBooking && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
          <div className="rounded-xl bg-white px-8 py-6 shadow-lg">
            <div className="mb-4 flex">
              <img
                src={selectedBooking.applicant.profile_picture}
                className="size-20 rounded-full border-2 border-white bg-red-100 object-cover object-center p-2 shadow-md"
                alt="applicant"
              />
              <div className="my-auto ml-3">
                <h2 className="mb-2 mt-1 text-lg font-semibold">{postTitle}</h2>
                <p>{selectedBooking.applicant.name}</p>
              </div>
              <p className="mb-2 mr-2 mt-auto">
                次數 : {selectedBooking.selected_times.length}
              </p>
              <div className="flex flex-col items-end">
                <button className="p-2" onClick={handleCloseModal}>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    strokeWidth={1.5}
                    stroke="currentColor"
                    className="size-6"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M6 18 18 6M6 6l12 12"
                    />
                  </svg>
                </button>
                <div className="mr-2 flex items-center">
                  <p className="p-2">
                    {selectedBooking.provider_uid === userId
                      ? "獲得 : "
                      : "支付 : "}
                  </p>
                  <img src={coin} alt="coin" className="size-9 object-cover" />
                  <p className="px-2">x {selectedBooking.coins_total}</p>
                </div>
              </div>
            </div>
            <div className="jus flex h-11 w-full items-center rounded-t-lg bg-zinc-500 px-4 text-white">
              <img
                src={infinite}
                alt="infinite-logo"
                className="mr-2 mt-2 w-12 object-cover"
              />
              學習時間表
            </div>
            {selectedBooking.selected_times.map((time, index) => (
              <p
                key={index}
                className="px-4 py-2 text-center"
                style={{
                  backgroundColor: index % 2 === 0 ? "white" : "lightgray",
                }}
              >
                {time}
              </p>
            ))}
            <div className="flex justify-end">
              <button className="mr-4 mt-4 rounded-md bg-slate-300 px-4 py-2 text-sm">
                拒絕
              </button>
              <button className="mt-4 rounded-md bg-orange-400 px-4 py-2 text-sm text-white">
                同意
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

AutoGeneratedSection.propTypes = {
  userId: PropTypes.string.isRequired,
};

export default AutoGeneratedSection;
